/*
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <unordered_map>

int main() {
	int n, m;
	std::size_t		pos, realpos = 0;
	std::vector<std::vector<int>>	v;
	std::vector<int>	p;
	std::unordered_map<int, int>	ans;
	std::ifstream		in("input.txt");
	std::string			s;

	//get_values
	if (in.is_open()) {
		getline(in, s);
		n = std::stoi(s, &pos);
		++pos;
		m = std::stoi(&s[pos]);
		v.resize(n * 2);
		p.resize(m);

		for (size_t i = 0; i < v.size(); i += 2) {
			getline(in, s);
			v[i] = {std::stoi(s, &pos), -1};
			++pos;
			v[i + 1] = {std::stoi(&s[pos]), 1};
		}
		getline(in, s);
		std::sort(v.begin(), v.end());
		for (size_t i = 0; i < p.size(); ++i) {
			p[i] = std::stoi(&s[realpos], &pos);
			v.push_back({p[i], 0});
			realpos += pos;
			++realpos;
		}
	}



	std::cout << n << ' ' << m << '\n';
	for (size_t i = 0; i < v.size(); i += 2) {
		std::cout << v[i][0] << ' ' << v[i + 1][0] << '\n';
	}
	for (size_t i = 0; i < p.size(); i += 1) {
		std::cout << p[i] << ' ';
	}


	
	std::sort(v.begin(), v.end());
	int		online = 0;
	//solution
	for (size_t i = 0; i < v.size(); ++i) {
		if (v[i][1] == -1)
			++online;
		else if (v[i][1] == 1)
			--online;
		else
			ans[v[i][0]] = online;
	}
	for (size_t i = 0; i < p.size(); ++i) {
		std::cout << ans[p[i]] << ' ';
	}
}
*/